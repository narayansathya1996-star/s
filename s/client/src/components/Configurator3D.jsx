import React,{useEffect,useRef,useState} from 'react'
import * as THREE from 'three'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
export default function Configurator3D(){const ref=useRef(null);const rendererRef=useRef(null);const [color,setColor]=useState('#6f7071');const [scale,setScale]=useState(1);useEffect(()=>{const el=ref.current;const w=Math.min(900,window.innerWidth-80);const h=Math.round(w*0.6);const renderer=new THREE.WebGLRenderer({antialias:true,alpha:true});renderer.setSize(w,h);renderer.setPixelRatio(window.devicePixelRatio);el.appendChild(renderer.domElement);rendererRef.current=renderer;const scene=new THREE.Scene();const camera=new THREE.PerspectiveCamera(45,w/h,0.1,100);camera.position.set(2,1.2,4);scene.add(new THREE.AmbientLight(0xffffff,0.28));const dir=new THREE.DirectionalLight(0xE63315,0.9);dir.position.set(5,6,2);scene.add(dir);const matGrey=new THREE.MeshStandardMaterial({color:0x6f7071,metalness:0.95,roughness:0.2});const box=new THREE.Mesh(new THREE.BoxGeometry(2,1.2,1),matGrey);scene.add(box);const floor=new THREE.Mesh(new THREE.PlaneGeometry(10,6),new THREE.MeshStandardMaterial({color:0x030303,metalness:0.95,roughness:0.9}));floor.rotation.x=-Math.PI/2;floor.position.y=-1;scene.add(floor);const controls=new OrbitControls(camera,renderer.domElement);controls.enableDamping=true;function animate(){requestAnimationFrame(animate);box.rotation.y+=0.002;controls.update();renderer.render(scene,camera);}animate();ref.current._three={renderer,scene,camera,box,matGrey};function onResize(){const ww=Math.min(900,window.innerWidth-80);const hh=Math.round(ww*0.6);renderer.setSize(ww,hh);camera.aspect=ww/hh;camera.updateProjectionMatrix()}window.addEventListener('resize',onResize);return ()=>{window.removeEventListener('resize',onResize);try{renderer.dispose()}catch(e){};if(el&&renderer.domElement)el.removeChild(renderer.domElement)}} ,[])
useEffect(()=>{const t=ref.current&&ref.current._three;if(t){t.box.material.color.set(color);t.box.scale.set(scale,scale,scale)}},[color,scale])
function snapshot(){const renderer=rendererRef.current;if(!renderer)return;const dataURL=renderer.domElement.toDataURL('image/png');const a=document.createElement('a');a.href=dataURL;a.download='labifix-box.png';document.body.appendChild(a);a.click();a.remove()}return (<div style={{display:'flex',gap:16,alignItems:'flex-start'}}><div ref={ref} style={{borderRadius:10,overflow:'hidden',background:'#070707'}}></div><div style={{width:260,padding:12,background:'linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01))',borderRadius:8}}><label>Color</label><input type='color' value={color} onChange={e=>setColor(e.target.value)} style={{width:'100%',height:40,border:0,borderRadius:8}}/><div style={{display:'flex',gap:8,marginTop:8}}><button onClick={()=>setColor('#6f7071')} style={{background:'#6f7071',height:36,border:0,width:36,borderRadius:6}} title='Nevada Grey' /><button onClick={()=>setColor('#E63315')} style={{background:'#E63315',height:36,border:0,width:36,borderRadius:6}} title='Pomegranate Red' /></div><label style={{marginTop:12}}>Scale</label><input type='range' min='0.5' max='1.6' step='0.05' value={scale} onChange={e=>setScale(parseFloat(e.target.value))} style={{width:'100%'}}/><div style={{marginTop:12}}><button onClick={snapshot} style={{background:'#E63315',color:'#fff',padding:'8px 12px',border:0,borderRadius:6}}>Download snapshot</button></div><p style={{fontSize:12,color:'#bbb',marginTop:10}}>Tip: drag to rotate, scroll to zoom.</p></div></div>)}
